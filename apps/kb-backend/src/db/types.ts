/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<
  string,
  bigint | number | string,
  bigint | number | string
>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Numeric = ColumnType<string, number | string, number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Collections {
  created_at: Generated<Timestamp>;
  id: Generated<Int8>;
  name: string;
}

export interface DocumentChunks {
  chunk_index: number;
  content: string;
  created_at: Generated<Timestamp>;
  document_id: Int8 | null;
  embedding: string;
  id: Generated<Int8>;
  max_chunk_index: number;
  updated_at: Generated<Timestamp>;
}

export interface Documents {
  collection_id: Int8;
  content: string;
  created_at: Generated<Timestamp>;
  hierarchy_path: string | null;
  id: Generated<Int8>;
  metadata: Json | null;
  summary: string;
  summary_embedding: string;
  title: string;
  updated_at: Generated<Timestamp>;
}

export interface SchemaMigrations {
  version: string;
}

export interface DB {
  collections: Collections;
  document_chunks: DocumentChunks;
  documents: Documents;
  schema_migrations: SchemaMigrations;
}
